generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Dispatch {
  id                       String    @id @default(uuid())
  dispatcher_id            String
  emergency_id             String
  team_id                  String
  caller_name              String
  caller_number            String
  location                 String
  description              String
  num_people_involved      Int
  hazard                   String
  time_of_call             DateTime
  time_proceeding_scene    DateTime?
  time_arrival_scene       DateTime?
  time_proceeding_hospital DateTime?
  time_arrival_hospital    DateTime?
  time_proceeding_base     DateTime?
  time_arrival_base        DateTime?
  remarks                  String
  status                   Int
  is_cancelled             Boolean   @default(false)
  is_completed             Boolean   @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Define relationships
  dispatcher User      @relation(fields: [dispatcher_id], references: [id])
  emergency  Emergency @relation(fields: [emergency_id], references: [id])
  team       Team      @relation(fields: [team_id], references: [id])

  @@map("dispatch")
}

model User {
  id              String   @id @default(uuid())
  user_id         Int      @unique @default(autoincrement())
  user_name       String   @unique
  user_level      Int
  password_hash   String
  last_name       String
  first_name      String
  gender          Int
  address         String
  birth_date      DateTime
  contact_no      String
  blood_type      String
  status          Int
  dispatch_status Int?
  type            Int
  bart_id         String?
  cso_id          String?
  po_id           String?
  na_id           String?

  Bart Bart? @relation(fields: [bart_id], references: [id])
  Cso  Cso?  @relation(fields: [cso_id], references: [id])
  Po   Po?   @relation(fields: [po_id], references: [id])
  Na   Na?   @relation(fields: [na_id], references: [id])

  teamMembers TeamMember[]
  teamLeader  Team?        @relation("TeamLeader")
  skills      UserSkill[]

  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  emergencyContacts EmergencyContact[]
  Dispatch          Dispatch[]
  StockMovement     StockMovement[]

  image_url  String?
  is_deleted Boolean @default(false)

  // @@unique([first_name, last_name], name: "unique_first_last_name")
  @@map("user")
}

model Team {
  id             String @id @default(uuid())
  team_leader    User   @relation("TeamLeader", fields: [team_leader_id], references: [id], onDelete: Cascade)
  team_leader_id String @unique
  name           String @unique
  status         Int

  // Define a one-to-many relationship with TeamMembers
  teamMembers TeamMember[]

  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  Dispatch   Dispatch[]

  is_deleted Boolean @default(false)

  @@map("team")
}

model TeamMember {
  id        String @id @default(uuid())
  team      Team   @relation(fields: [team_id], references: [id], onDelete: Cascade)
  team_id   String
  member    User   @relation(fields: [member_id], references: [id], onDelete: Cascade)
  member_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([team_id, member_id], name: "unique_team_id_member_id")
  @@map("team_member")
}

model UserSkill {
  id                String        @id @default(uuid())
  user              User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id           String
  TrainingSkill     TrainingSkill @relation(fields: [training_skill_id], references: [id], onDelete: Cascade)
  training_skill_id String
  image_url         String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  // SkillCertificate SkillCertificate[]

  @@unique([user_id, training_skill_id], name: "unique_user_skill")
  @@map("user_skill")
}

model TrainingSkill {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  UserSkill  UserSkill[]

  is_deleted Boolean @default(false)

  @@map("training_skill")
}

model Emergency {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  Dispatch    Dispatch[]

  is_deleted Boolean @default(false)

  @@map("emergency")
}

model Bart {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  User        User[]

  is_deleted Boolean @default(false)

  @@map("bart")
}

model Cso {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  User        User[]

  is_deleted Boolean @default(false)

  @@map("cso")
}

model Po {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  User        User[]

  is_deleted Boolean @default(false)

  @@map("po")
}

model Na {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  User        User[]

  is_deleted Boolean @default(false)

  @@map("na")
}

// model SkillCertificate {
//   id             String    @id @default(uuid())
//   userSkill      UserSkill @relation(fields: [user_skill_id], references: [id], onDelete: Cascade)
//   user_skill_id  String
//   certificateUrl String // You can store the URL or information about the certificate

//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt

//   @@map("skill_certificate")
// }

model EmergencyContact {
  id           String @id @default(uuid())
  user         User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      String
  name         String
  relationship String
  mobile       String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // @@unique([user_id, mobile], name: "UserMobileUnique")
  @@map("emergency_contact")
}

model Location {
  id   String @id @default(uuid())
  name String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("location")
}

model Item {
  id            String          @id @default(uuid())
  category_id   String
  Category      ItemCategory    @relation(fields: [category_id], references: [id])
  StockMovement StockMovement[]
  name          String          @unique
  description   String
  quantity      Int
  cost          Decimal
  date_acquired DateTime
  serial_number String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  is_deleted Boolean @default(false)

  @@map("item")
}

model ItemCategory {
  id    String @id @default(uuid())
  name  String @unique
  items Item[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  is_deleted Boolean @default(false)

  @@map("item_category")
}

model StockMovement {
  id            String   @id @default(uuid())
  item_id       String
  item          Item     @relation(fields: [item_id], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       String
  quantity      Int
  movement_type Int
  movement_date DateTime
  remarks       String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("stock_movement")
}
